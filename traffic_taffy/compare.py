"""The primary statistical packet comparison engine."""

from __future__ import annotations
from typing import List, TYPE_CHECKING, Any
from logging import error

if TYPE_CHECKING:
    from traffic_taffy.dissection import Dissection
    from traffic_taffy.comparison import Comparison
    from argparse_with_config import ArgumentParserWithConfig

from traffic_taffy.dissectmany import PCAPDissectMany
from traffic_taffy.algorithms.statistical import ComparisonStatistical
from traffic_taffy.algorithms.comparecorrelation import CompareCorrelation
from traffic_taffy.algorithms.comparecorrelationchanges import CompareCorrelationChanges
from traffic_taffy.taffy_config import TaffyConfig, taffy_default
from traffic_taffy.dissector import TTD_CFG, TTL_CFG


class TTC_CFG:
    KEY_COMPARE: str = "compare"
    ONLY_POSITIVE: str = "only_positive"
    ONLY_NEGATIVE: str = "only_negative"
    PRINT_THRESHOLD: str = "print_threshold"
    TOP_RECORDS: str = "top_records"
    REVERSE_SORT: str = "reverse_sort"
    SORT_BY: str = "sort_by"
    ALGORITHM: str = "algorithm"


def compare_default(name: str, value: Any) -> None:
    taffy_default(TTC_CFG.KEY_COMPARE + "." + name, value)


compare_default(TTC_CFG.ONLY_POSITIVE, False)
compare_default(TTC_CFG.ONLY_NEGATIVE, False)
compare_default(TTC_CFG.PRINT_THRESHOLD, 0.0)
compare_default(TTC_CFG.TOP_RECORDS, None)
compare_default(TTC_CFG.REVERSE_SORT, False)
compare_default(TTC_CFG.SORT_BY, "delta%")
compare_default(TTC_CFG.ALGORITHM, "statistical")
compare_default(TTC_CFG.PRINT_THRESHOLD, 0.0)


class PcapCompare:
    """Take a set of PCAPs to then perform various comparisons upon."""

    def __init__(
        self,
        pcap_files: List[str],
        config: TaffyConfig | None = None,
    ) -> None:
        """Create a compare object."""
        self.config = config
        self._pcap_files = pcap_files
        if not self.config:
            config = TaffyConfig()

        dissector_config = config[TTD_CFG.KEY_DISSECTOR]

        self.maximum_count = dissector_config[TTD_CFG.PACKET_COUNT]
        self.pcap_filter = dissector_config[TTD_CFG.CACHE_PCAP_RESULTS]
        self.dissection_level = dissector_config[TTD_CFG.DISSECTION_LEVEL]
        # self.between_times = config[TTC_CFG.BETWEEN_TIMES]
        self.bin_size = dissector_config[TTD_CFG.BIN_SIZE]
        self.cache_file_suffix = dissector_config[TTD_CFG.CACHE_FILE_SUFFIX]
        if self.cache_file_suffix[0] != ".":
            self.cache_file_suffix = "." + self.cache_file_suffix
        self.ignore_list = dissector_config[TTD_CFG.IGNORE_LIST]
        self.layers = dissector_config[TTD_CFG.LAYERS]
        self.force_overwrite = dissector_config[TTD_CFG.FORCE_OVERWRITE]
        self.force_load = dissector_config[TTD_CFG.FORCE_LOAD]
        self.filter_arguments = dissector_config[TTD_CFG.FILTER_ARGUMENTS]
        self.merge_files = dissector_config[TTD_CFG.MERGE]

        compare_config = config[TTC_CFG.KEY_COMPARE]
        algorithm = compare_config[TTC_CFG.ALGORITHM]

        algorithm_arguments = {
            "timestamps": None,
            "match_string": self.filter_arguments["match_string"],
            "match_value": self.filter_arguments["match_value"],
            "minimum_count": self.filter_arguments["minimum_count"],
            "make_printable": True,
            "match_expression": self.filter_arguments["match_expression"],
        }

        if algorithm == "statistical":
            self.algorithm = ComparisonStatistical(
                **algorithm_arguments,
            )
        elif algorithm == "correlation":
            self.algorithm = CompareCorrelation(
                **algorithm_arguments,
            )
        elif algorithm == "correlationchanges":
            self.algorithm = CompareCorrelationChanges(
                **algorithm_arguments,
            )
        else:
            error(f"unknown algorithm: {algorithm}")
            raise ValueError()

    @property
    def pcap_files(self) -> List[str]:
        """List of pcap files being compared."""
        return self._pcap_files

    @pcap_files.setter
    def pcap_files(self, new_pcap_files: List[str]) -> None:
        self._pcap_files = new_pcap_files

    @property
    def reports(self) -> List[dict]:
        """List of reports generated by the comparison."""
        return self._reports

    @reports.setter
    def reports(self, newvalue: List[dict]) -> None:
        self._reports = newvalue

    def load_pcaps(self, config: TaffyConfig) -> None:
        """Load all pcaps into memory and dissect them."""
        # load the first as a reference pap
        pdm = PCAPDissectMany(
            self.pcap_files,
            config,
        )
        return pdm.load_all()

    def compare(self) -> List[Comparison]:
        """Compare each pcap as requested."""
        dissections = self.load_pcaps(self.config)
        self.compare_all(dissections)
        return self.reports

    def compare_all(self, dissections: List[Dissection]) -> List[Comparison]:
        """Compare all loaded pcaps."""

        self.reports = self.algorithm.compare_dissections(dissections)
        return self.reports


def compare_add_parseargs(
    compare_parser: ArgumentParserWithConfig,
    config: TaffyConfig | None = None,
    add_subgroup: bool = True,
) -> ArgumentParserWithConfig:
    """Add common comparison arguments."""

    if not config:
        config = TaffyConfig()
    compare_config = config[TTC_CFG.KEY_COMPARE]

    if add_subgroup:
        compare_parser = compare_parser.add_argument_group(
            "Comparison result options", config_path=TTC_CFG.KEY_COMPARE
        )

    compare_parser.add_argument(
        "-t",
        "--print-threshold",
        default=compare_config[TTC_CFG.PRINT_THRESHOLD],
        config_path=TTC_CFG.PRINT_THRESHOLD,
        type=float,
        help="Don't print results with abs(percent) less than this threshold",
    )

    compare_parser.add_argument(
        "-P",
        "--only-positive",
        action="store_true",
        help="Only show positive entries",
        default=compare_config[TTC_CFG.ONLY_POSITIVE],
        config_path=TTC_CFG.ONLY_POSITIVE,
    )

    compare_parser.add_argument(
        "-N",
        "--only-negative",
        action="store_true",
        help="Only show negative entries",
        default=compare_config[TTC_CFG.ONLY_NEGATIVE],
        config_path=TTC_CFG.ONLY_NEGATIVE,
    )

    compare_parser.add_argument(
        "-R",
        "--top-records",
        default=compare_config[TTC_CFG.TOP_RECORDS],
        config_path=TTC_CFG.TOP_RECORDS,
        type=int,
        help="Show the top N records from each section.",
    )

    compare_parser.add_argument(
        "-r",
        "--reverse_sort",
        action="store_true",
        default=compare_config[TTC_CFG.REVERSE_SORT],
        config_path=TTC_CFG.REVERSE_SORT,
        help="Reverse the sort order of reports",
    )

    compare_parser.add_argument(
        "-s",
        "--sort-by",
        default=compare_config[TTC_CFG.SORT_BY],
        config_path=TTC_CFG.SORT_BY,
        type=str,
        help="Sort report entries by this column",
    )

    compare_parser.add_argument(
        "-A",
        "--algorithm",
        default=compare_config[TTC_CFG.ALGORITHM],
        config_path=TTC_CFG.ALGORITHM,
        type=str,
        help="The algorithm to apply for data comparison (statistical, correlation)",
    )

    # compare_parser.add_argument(
    #     "-T",
    #     "--between-times",

    return compare_parser


def get_comparison_args(config: dict) -> dict:
    """Return a dict of comparison parameters from arguments."""
    dissect_config = config[TTD_CFG.KEY_DISSECTOR]
    compare_config = config[TTC_CFG.KEY_COMPARE]
    limitor_config = config[TTL_CFG.KEY_LIMITOR]

    return {
        "maximum_count": dissect_config[TTD_CFG.PACKET_COUNT] or 0,
        "match_string": limitor_config[TTL_CFG.MATCH_STRING],
        "match_value": limitor_config[TTL_CFG.MATCH_VALUE],
        "match_expression": limitor_config[TTL_CFG.MATCH_EXPRESSION],
        "minimum_count": limitor_config[TTL_CFG.MINIMUM_COUNT],
        "print_threshold": float(compare_config[TTC_CFG.PRINT_THRESHOLD]) / 100.0,
        "only_positive": compare_config[TTC_CFG.ONLY_POSITIVE],
        "only_negative": compare_config[TTC_CFG.ONLY_NEGATIVE],
        "top_records": compare_config[TTC_CFG.TOP_RECORDS],
        "reverse_sort": compare_config[TTC_CFG.REVERSE_SORT],
        "sort_by": compare_config[TTC_CFG.SORT_BY],
        "merge_files": dissect_config[TTD_CFG.MERGE],
        "algorithm": compare_config[TTC_CFG.ALGORITHM],
    }
